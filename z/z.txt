props are props

but children can be wraped around ba a different component before being passed


<template>
  <md-card class="md-card-nav-tabs">
    <!-- Header -->
    <div class="card-header">
      <h2 class="card-title">Navigation Card with Sliding Tabs</h2>

      <div class="nav-container">
        <!-- Left Arrow -->
        <button
          class="nav-arrow left"
          @click="scrollLeft"
          :disabled="scrollPosition === 0"
        >
          <svg viewBox="0 0 24 24">
            <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"></path>
          </svg>
        </button>

        <!-- Tabs -->
        <div class="nav-tabs-container" ref="tabsContainerRef">
          <div
            class="nav-tabs"
            ref="tabsRef"
            :style="{ transform: `translateX(${scrollPosition}px)` }"
          >
            <div
              v-for="(tab, index) in tabs"
              :key="index"
              :class="['nav-tab', { active: activeTab === index }]"
              @click="setActiveTab(index)"
            >
              {{ tab }}
            </div>
          </div>
        </div>

        <!-- Right Arrow -->
        <button
          class="nav-arrow right"
          @click="scrollRight"
          :disabled="isScrollEnd"
        >
          <svg viewBox="0 0 24 24">
            <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
          </svg>
        </button>

        
      </div>
    </div>

    <!-- Content -->
    <md-card-content>
      <div class="tab-content">
        <h3>{{ tabs[activeTab] }}</h3>
        <p>{{ tabContents[activeTab] }}</p>
      </div>
    </md-card-content>

    <!-- Footer -->
    <div class="card-footer">
      <button class="action-button">Save Changes</button>
    </div>
  </md-card>
</template>

<script setup>
import { ref, computed, onMounted, onBeforeUnmount } from "vue";

const tabs = ref([
  "Dashboard",
  "Analytics",
  "Reports",
  "Settings",
  "Profile",
  "Messages",
  "Notifications",
  "Support",
  "Billing",
  "Security",
]);

const activeTab = ref(0);
const scrollPosition = ref(0);
const tabsContainerWidth = ref(0);
const tabsWidth = ref(0);

const tabsContainerRef = ref(null);
const tabsRef = ref(null);

const tabContents = {
  0: "Get a summary of your account activity, recent updates, and performance metrics.",
  1: "View detailed analytics of your monthly performance with interactive charts.",
  2: "Access comprehensive reports and download them in various formats.",
  3: "Manage your account preferences, security settings, and notification options.",
  4: "Edit your personal information, profile picture, and contact details.",
  5: "Check your messages and conversations with other users.",
  6: "View and manage your notification preferences and history.",
  7: "Get help and support for any issues you might be experiencing.",
  8: "Manage your billing information and payment methods.",
  9: "Configure security settings and two-factor authentication.",
};

const isScrollEnd = computed(() => {
  return scrollPosition.value <= -(tabsWidth.value - tabsContainerWidth.value);
});

const setActiveTab = (index) => {
  activeTab.value = index;
};

const scrollLeft = () => {
  scrollPosition.value = Math.min(scrollPosition.value + 200, 0);
};

const scrollRight = () => {
  const maxScroll = -(tabsWidth.value - tabsContainerWidth.value);
  scrollPosition.value = Math.max(scrollPosition.value - 200, maxScroll);
};

const calculateWidths = () => {
  if (tabsContainerRef.value && tabsRef.value) {
    tabsContainerWidth.value = tabsContainerRef.value.offsetWidth;
    tabsWidth.value = tabsRef.value.scrollWidth;
  }
};

onMounted(() => {
  calculateWidths();
  window.addEventListener("resize", calculateWidths);
});

onBeforeUnmount(() => {
  window.removeEventListener("resize", calculateWidths);
});
</script>

<style scoped>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Inter", sans-serif;
}

.md-card {
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
  overflow: hidden;
}

.md-card-nav-tabs {
  position: relative;
}

.card-header {
  padding: 20px 24px 0;
}

.card-title {
  font-size: 1.25rem;
  font-weight: 600;
  color: #333;
  margin-bottom: 16px;
}

.nav-container {
  position: relative;
  display: flex;
  align-items: center;
  margin: 0 -10px;
}

.nav-arrow {
  width: 36px;
  height: 36px;
  background: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  z-index: 10;
  transition: all 0.3s ease;
  border: none;
  flex-shrink: 0;
}

.nav-arrow:hover {
  background: #f0f0f0;
  transform: scale(1.05);
}

.nav-arrow:active {
  transform: scale(0.95);
}

.nav-arrow.left {
  margin-right: 4px;
}

.nav-arrow.right {
  margin-left: 4px;
}

.nav-arrow svg {
  width: 20px;
  height: 20px;
  fill: #1976d2;
}

.nav-tabs-container {
  overflow: hidden;
  width: 100%;
}

.nav-tabs {
  display: flex;
  gap: 8px;
  transition: transform 0.3s ease;
  padding: 4px 0;
}

.nav-tab {
  padding: 10px 20px;
  background: #f0f0f0;
  border-radius: 20px;
  white-space: nowrap;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 0.9rem;
  font-weight: 500;
  flex-shrink: 0;
}

.nav-tab.active {
  background: #1976d2;
  color: white;
}

.nav-tab:hover {
  background: #e0e0e0;
}

.nav-tab.active:hover {
  background: #1565c0;
}

.md-card-content {
  padding: 24px;
}

.tab-content {
  padding: 16px;
  background: #f8f9fa;
  border-radius: 8px;
  min-height: 120px;
}

.tab-content h3 {
  font-weight: 600;
  margin-bottom: 8px;
  color: #333;
}

.tab-content p {
  color: #666;
  font-size: 0.9rem;
  line-height: 1.5;
}

.card-footer {
  padding: 16px 24px 20px;
  text-align: right;
  border-top: 1px solid #eee;
}

.action-button {
  padding: 10px 20px;
  background: #1976d2;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 500;
  transition: background 0.3s ease;
}

.action-button:hover {
  background: #1565c0;
}

@media (max-width: 768px) {
  .nav-arrow {
    width: 32px;
    height: 32px;
  }

  .nav-arrow svg {
    width: 18px;
    height: 18px;
  }
}
</style>
